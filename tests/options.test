# Copyright Jerily LTD. All Rights Reserved.
# SPDX-FileCopyrightText: 2024 Neofytos Dimitriou (neo@jerily.cy)
# SPDX-License-Identifier: MIT.

package require tcltest
namespace import -force ::tcltest::test

package require trequests

source [file join [file dirname [info script]] common.tcl]

test treqOptions-1.1 { Test simple async create action without running } -body {
    set r [::trequests::get http://localhost -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -match glob -result {::trequests::request::handler*}

test treqOptions-1.2 { Test simple async create/destroy actions without running } -body {
    set result [list]
    set r [::trequests::get http://localhost -async]
    lappend result [llength [info commands $r]]
    $r destroy
    lappend result [llength [info commands $r]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {1 0}

test treqOptions-2.1.1 { Test HEAD request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::head http://localhost -async]
    lappend result [list \
        [$r easy_opts CURLOPT_HTTPGET] \
        [$r easy_opts CURLOPT_NOBODY] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
    $r destroy
    set r [::trequests::request HEAD http://localhost -async]
    lappend result [list \
        [$r easy_opts CURLOPT_HTTPGET] \
        [$r easy_opts CURLOPT_NOBODY] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 1} {1 1 1 1 1}}

test treqOptions-2.1.2 { Test GET request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::get http://localhost -async]
    lappend result [list \
        [$r easy_opts CURLOPT_HTTPGET] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
    $r destroy
    set r [::trequests::request GET http://localhost -async]
    lappend result [list \
        [$r easy_opts CURLOPT_HTTPGET] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 1} {1 1 1 1 1}}

test treqOptions-2.1.3 { Test POST request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::post http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [$r easy_opts CURLOPT_POST] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
    $r destroy
    set r [::trequests::request POST http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [$r easy_opts CURLOPT_POST] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 1} {1 1 1 1 1}}

test treqOptions-2.1.4 { Test PUT request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::put http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [$r easy_opts CURLOPT_UPLOAD] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
    $r destroy
    set r [::trequests::request PUT http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [$r easy_opts CURLOPT_UPLOAD] \
        [catch { $r easy_opts CURLOPT_CUSTOMREQUEST }]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 1} {1 1 1 1 1}}

test treqOptions-2.1.5 { Test PATCH request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::patch http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [$r easy_opts CURLOPT_CUSTOMREQUEST]]
    $r destroy
    set r [::trequests::request PATCH http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [$r easy_opts CURLOPT_CUSTOMREQUEST]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 PATCH} {1 1 1 1 PATCH}}

test treqOptions-2.1.6 { Test DELETE request } -constraints testingModeEnabled -body {
    set result [list]
    set r [::trequests::delete http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [$r easy_opts CURLOPT_CUSTOMREQUEST]]
    $r destroy
    set r [::trequests::request DELETE http://localhost -async]
    lappend result [list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [$r easy_opts CURLOPT_CUSTOMREQUEST]]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r result
} -result {{1 1 1 1 DELETE} {1 1 1 1 DELETE}}

test treqOptions-2.2 { Test custom request } -constraints testingModeEnabled -body {
    set r [::trequests::request XCUSTOM http://localhost -async]
    list \
        [catch { $r easy_opts CURLOPT_HTTPGET }] \
        [catch { $r easy_opts CURLOPT_NOBODY }] \
        [catch { $r easy_opts CURLOPT_POST }] \
        [catch { $r easy_opts CURLOPT_UPLOAD }] \
        [$r easy_opts CURLOPT_CUSTOMREQUEST]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {1 1 1 1 XCUSTOM}

test treqOptions-3.1 { Test URL option, error on wrong value } -body {
    set r [::trequests::get -foo]
    $r error
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {cURL error: Could not resolve host: -foo}

test treqOptions-4.1 { Test -data option, missing value } -body {
    set r [::trequests::get http://localhost -data]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-data" option requires an additional argument}

test treqOptions-4.2 { Test -data option, single value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data {foo %!1} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1}

test treqOptions-4.3.1 { Test -data option, multiple values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data {foo %!1} -data {bar %!2} -data {baz} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1&bar %!2&baz}

test treqOptions-4.3.2 { Test -data option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data {foo %!1} -data {} -data {baz} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1&baz}

test treqOptions-4.3.3 { Test -data option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data {} -data {} -data {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-4.4 { Test -data option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-4.5 { Test -data option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -data {foo %!1} -data_urlencode x } err
    lappend result $err
    catch { ::trequests::get http://localhost -data {foo %!1} -data_fields {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data {foo %!1} -data_fields_urlencode {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data {foo %!1} -json x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -data and -data_urlencode were specified
mutually exclusive options -data and -data_fields were specified
mutually exclusive options -data and -data_fields_urlencode were specified
mutually exclusive options -data and -json were specified}

test treqOptions-5.1 { Test -json option, missing value } -body {
    set r [::trequests::get http://localhost -json]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-json" option requires an additional argument}

test treqOptions-5.2 { Test -json option, single value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -json {foo %!1} -async]
    list [$r easy_opts CURLOPT_POSTFIELDS] [$r easy_opts CURLOPT_HTTPHEADER]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{foo %!1} {{Accept: application/json} {Content-Type: application/json}}}

test treqOptions-5.3 { Test -json option, multiple values } -body {
    set r [::trequests::get http://localhost -json {foo %!1} -json {bar %!2} -json {baz}]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-json option specified multiple times}

test treqOptions-5.4 { Test -json option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -json {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-5.5 { Test -json option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -json {foo %!1} -data_urlencode x } err
    lappend result $err
    catch { ::trequests::get http://localhost -json {foo %!1} -data_fields {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -json {foo %!1} -data_fields_urlencode {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -json {foo %!1} -data x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -data_urlencode and -json were specified
mutually exclusive options -data_fields and -json were specified
mutually exclusive options -data_fields_urlencode and -json were specified
mutually exclusive options -data and -json were specified}

test treqOptions-6.1 { Test -data_urlencode option, missing value } -body {
    set r [::trequests::get http://localhost -data_urlencode]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-data_urlencode" option requires an additional argument}

test treqOptions-6.2 { Test -data_urlencode option, single value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_urlencode {foo %!1} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo%20%25%211}

test treqOptions-6.3.1 { Test -data_urlencode option, multiple values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_urlencode {foo %!1} -data_urlencode {bar %!2} -data_urlencode {baz} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo%20%25%211&bar%20%25%212&baz}

test treqOptions-6.3.2 { Test -data_urlencode option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_urlencode {foo %!1} -data_urlencode {} -data_urlencode {baz} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo%20%25%211&baz}

test treqOptions-6.3.3 { Test -data_urlencode option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_urlencode {} -data_urlencode {} -data_urlencode {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-6.4 { Test -data_urlencode option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_urlencode {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-6.5 { Test -data_urlencode option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -data_urlencode {foo %!1} -data x } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_urlencode {foo %!1} -data_fields {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_urlencode {foo %!1} -data_fields_urlencode {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_urlencode {foo %!1} -json x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -data and -data_urlencode were specified
mutually exclusive options -data_urlencode and -data_fields were specified
mutually exclusive options -data_urlencode and -data_fields_urlencode were specified
mutually exclusive options -data_urlencode and -json were specified}

test treqOptions-7.1 { Test -data_fields option, missing value } -body {
    set r [::trequests::get http://localhost -data_fields]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-data_fields" option requires an additional argument}

test treqOptions-7.2.1 { Test -data_fields option, single value, 1 correct key-val pair } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%!1}

test treqOptions-7.2.2 { Test -data_fields option, single value, 3 correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1 bar %% foo {qux with space}} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%!1&bar=%%&foo=qux with space}

test treqOptions-7.2.3 { Test -data_fields option, single value, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1 bar %% foo} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -data_fields, but got a list of 5 items}

test treqOptions-7.3.1 { Test -data_fields option, multiple values, correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1} -data_fields {bar %!2 key {val }} -data_fields {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%!1&bar=%!2&key=val &baz=123}

test treqOptions-7.3.2 { Test -data_fields option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1} -data_fields {} -data_fields {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%!1&baz=123}

test treqOptions-7.3.3 { Test -data_fields option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {} -data_fields {} -data_fields {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-7.3.4 { Test -data_fields option, multiple values, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -data_fields {foo %!1} -data_fields {bar key {val }} -data_fields {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -data_fields, but got a list of 3 items}

test treqOptions-7.4 { Test -data_fields option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-7.5 { Test -data_fields option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -data_fields {foo %!1} -data_urlencode x } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields {foo %!1} -data {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields {foo %!1} -data_fields_urlencode {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields {foo %!1} -json x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -data_urlencode and -data_fields were specified
mutually exclusive options -data and -data_fields were specified
mutually exclusive options -data_fields and -data_fields_urlencode were specified
mutually exclusive options -data_fields and -json were specified}

test treqOptions-8.1 { Test -data_fields_urlencode option, missing value } -body {
    set r [::trequests::get http://localhost -data_fields_urlencode]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-data_fields_urlencode" option requires an additional argument}

test treqOptions-8.2.1 { Test -data_fields_urlencode option, single value, 1 correct key-val pair } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211}

test treqOptions-8.2.2 { Test -data_fields_urlencode option, single value, 3 correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1 bar %% foo {qux with space}} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&bar=%25%25&foo=qux%20with%20space}

test treqOptions-8.2.3 { Test -data_fields_urlencode option, single value, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1 bar %% foo} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -data_fields_urlencode, but got a list of 5 items}

test treqOptions-8.3.1 { Test -data_fields_urlencode option, multiple values, correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data_fields_urlencode {bar %!2 key {val }} -data_fields_urlencode {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&bar=%25%212&key=val%20&baz=123}

test treqOptions-8.3.2 { Test -data_fields_urlencode option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data_fields_urlencode {} -data_fields_urlencode {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&baz=123}

test treqOptions-8.3.3 { Test -data_fields_urlencode option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {} -data_fields_urlencode {} -data_fields_urlencode {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-8.3.4 { Test -data_fields_urlencode option, multiple values, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data_fields_urlencode {bar key {val }} -data_fields_urlencode {baz 123} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -data_fields_urlencode, but got a list of 3 items}

test treqOptions-8.4 { Test -data_fields_urlencode option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -data_fields_urlencode {} -async]
    $r easy_opts CURLOPT_POSTFIELDS
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {}

test treqOptions-8.5 { Test -data_fields_urlencode option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data_urlencode x } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields_urlencode {foo %!1} -data_fields {x y} } err
    lappend result $err
    catch { ::trequests::get http://localhost -data_fields_urlencode {foo %!1} -json x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -data_urlencode and -data_fields_urlencode were specified
mutually exclusive options -data and -data_fields_urlencode were specified
mutually exclusive options -data_fields and -data_fields_urlencode were specified
mutually exclusive options -data_fields_urlencode and -json were specified}

test treqOptions-9.1 { Test -params option, missing value } -body {
    set r [::trequests::get http://localhost -params]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-params" option requires an additional argument}

test treqOptions-9.2.1 { Test -params option, single value, 1 correct key-val pair } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {foo %!1} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211}

test treqOptions-9.2.2 { Test -params option, single value, 3 correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {foo %!1 bar %% foo {qux with space}} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&bar=%25%25&foo=qux%20with%20space}

test treqOptions-9.2.3 { Test -params option, single value, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -params {foo %!1 bar %% foo} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -params, but got a list of 5 items}

test treqOptions-9.3.1 { Test -params option, multiple values, correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {foo %!1} -params {bar %!2 key {val }} -params {baz 123} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&bar=%25%212&key=val%20&baz=123}

test treqOptions-9.3.2 { Test -params option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {foo %!1} -params {} -params {baz 123} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo=%25%211&baz=123}

test treqOptions-9.3.3 { Test -params option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {} -params {} -params {} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLUPART_QUERY"}

test treqOptions-9.3.4 { Test -params option, multiple values, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -params {foo %!1} -params {bar key {val }} -params {baz 123} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {an even numbered list is expected for option -params, but got a list of 3 items}

test treqOptions-9.4 { Test -params option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params {} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLUPART_QUERY"}

test treqOptions-9.5 { Test -params option, mutually exclusive options } -body {
    set result [list]
    catch { ::trequests::get http://localhost -params {foo %!1} -params_raw x } err
    lappend result $err
    join $result \n
} -cleanup {
    unset -nocomplain result err
} -result {mutually exclusive options -params and -params_raw were specified}

test treqOptions-10.1 { Test -params_raw option, missing value } -body {
    set r [::trequests::get http://localhost -params_raw]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-params_raw" option requires an additional argument}

test treqOptions-10.2 { Test -params_raw option, single value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params_raw {foo %!1} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1}

test treqOptions-10.3.1 { Test -params_raw option, multiple values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params_raw {foo %!1} -params_raw {bar %!2} -params_raw {baz} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1&bar %!2&baz}

test treqOptions-10.3.2 { Test -params_raw option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params_raw {foo %!1} -params_raw {} -params_raw {baz} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {foo %!1&baz}

test treqOptions-10.3.3 { Test -params_raw option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params_raw {} -params_raw {} -params_raw {} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLUPART_QUERY"}

test treqOptions-10.4 { Test -params_raw option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -params_raw {} -async]
    $r easy_opts CURLUPART_QUERY
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLUPART_QUERY"}

test treqOptions-11.1 { Test -headers option, missing value } -body {
    set r [::trequests::get http://localhost -headers]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-headers" option requires an additional argument}

test treqOptions-11.2.1 { Test -headers option, single value, 1 correct key-val pair } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here}} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{header1: value here}}

test treqOptions-11.2.2 { Test -headers option, single value, 3 correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here} header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{header1: value here} {header2: value2} {header3: %%%^!}}

test treqOptions-11.2.3 { Test -headers option, single value, correct key-val pairs, duplicates } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here} header2 value2 header3 {%%%^!} Header2 Value2} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{header1: value here} {header3: %%%^!} {Header2: Value2}}

test treqOptions-11.2.4 { Test -headers option, single value, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -headers {header1 {value here} header2 value2 header3} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-headers option is expected to be a valid dict, but got: missing value to go with key}

test treqOptions-11.3.1 { Test -headers option, multiple values, correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here}} -headers {header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{header1: value here} {header2: value2} {header3: %%%^!}}

test treqOptions-11.3.2 { Test -headers option, multiple values, correct key-val pairs, duplicates } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here}} -headers {header2 value2 heADer1 {%%%^!}} -headers {Header2 Value2} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{heADer1: %%%^!} {Header2: Value2}}

test treqOptions-11.3.3 { Test -headers option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {header1 {value here}} -headers {} -headers {header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result {{header1: value here} {header2: value2} {header3: %%%^!}}

test treqOptions-11.3.4 { Test -headers option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {} -headers {} -headers {} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLOPT_HTTPHEADER"}

test treqOptions-11.3.5 { Test -headers option, multiple values, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -headers {header1 {value here}} -headers {} -headers {header2 value2 header3 {%%%^!} foo} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-headers option is expected to be a valid dict, but got: missing value to go with key}

test treqOptions-11.4 { Test -headers option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -headers {} -async]
    $r easy_opts CURLOPT_HTTPHEADER
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLOPT_HTTPHEADER"}

# We cannot verify parts of cur_mime and their contents. So here we will just
# keep track of whether the mime parts are defined or not. Also we hope
# memory leak hunter will catch possible leaks.

test treqOptions-12.1 { Test -form option, missing value } -body {
    set r [::trequests::get http://localhost -form]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-form" option requires an additional argument}

test treqOptions-12.2.1 { Test -form option, single value, 1 correct key-val pair } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here}} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.2.2 { Test -form option, single value, 3 correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here} header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.2.3 { Test -form option, single value, correct key-val pairs, duplicates } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here} header2 value2 header3 {%%%^!} Header2 Value2} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.2.4 { Test -form option, single value, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -form {header1 {value here} header2 value2 header3} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-form option is expected to be a valid dict, but got: missing value to go with key}

test treqOptions-12.3.1 { Test -form option, multiple values, correct key-val pairs } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here}} -form {header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.3.2 { Test -form option, multiple values, correct key-val pairs, duplicates } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here}} -form {header2 value2 heADer1 {%%%^!}} -form {Header2 Value2} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.3.3 { Test -form option, multiple values, empty values } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {header1 {value here}} -form {} -form {header2 value2 header3 {%%%^!}} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result "pointer"

test treqOptions-12.3.4 { Test -form option, multiple values, all are empty } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {} -form {} -form {} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLOPT_MIMEPOST"}

test treqOptions-12.3.5 { Test -form option, multiple values, incorrect key-val pair } -body {
    set r [::trequests::get http://localhost -form {header1 {value here}} -form {} -form {header2 value2 header3 {%%%^!} foo} -async]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-form option is expected to be a valid dict, but got: missing value to go with key}

test treqOptions-12.4 { Test -form option, empty value } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -form {} -async]
    $r easy_opts CURLOPT_MIMEPOST
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {no registered easy option "CURLOPT_MIMEPOST"}

test treqOptions-13.1 { Test -verbose option, missing value } -body {
    set r [::trequests::get http://localhost -verbose]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-verbose" option requires an additional argument}

test treqOptions-13.2 { Test -verbose option, wrong value } -body {
    set r [::trequests::get http://localhost -verbose foo]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-verbose option is expected to be a boolean, but got: 'foo'}

test treqOptions-13.3 { Test -verbose option, value: true } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -verbose 1 -async]
    $r easy_opts CURLOPT_VERBOSE
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result 1

test treqOptions-13.4 { Test -verbose option, value: false } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -verbose false -async]
    $r easy_opts CURLOPT_VERBOSE
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result 0

test treqOptions-14.1 { Test -allow_redirects option, missing value } -body {
    set r [::trequests::get http://localhost -allow_redirects]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {"-allow_redirects" option requires an additional argument}

test treqOptions-14.2 { Test -allow_redirects option, wrong value } -body {
    set r [::trequests::get http://localhost -allow_redirects baz]
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -returnCodes error -result {-allow_redirects option is expected to be a boolean, but got: 'baz'}

test treqOptions-14.3 { Test -allow_redirects option, value: true } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -allow_redirects yes -async]
    $r easy_opts CURLOPT_FOLLOWLOCATION
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result 1

test treqOptions-14.4 { Test -allow_redirects option, value: false } -constraints testingModeEnabled -body {
    set r [::trequests::get http://localhost -allow_redirects 0 -async]
    $r easy_opts CURLOPT_FOLLOWLOCATION
} -cleanup {
    catch { $r destroy }
    unset -nocomplain r
} -result 0
