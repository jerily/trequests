# Copyright Jerily LTD. All Rights Reserved.
# SPDX-FileCopyrightText: 2024 Neofytos Dimitriou (neo@jerily.cy)
# SPDX-License-Identifier: MIT.

package require tcltest
namespace import -force ::tcltest::test

package require trequests

source [file join [file dirname [info script]] common.tcl]

test treqAsync-1.1 { Test basic async request, success } -body {
    set result [list]
    set r [::trequests::get https://www.example.com -async -callback [list set ::done]]
    lappend result [$r state]
    lappend result [$r status_code]
    lappend result [$r text]
    set timer [after 5000 [list set ::done timeout]]
    vwait ::done
    lappend result [$r state]
    lappend result [$r status_code]
    lappend result $::done
} -cleanup {
    catch { after cancel $timer }
    catch { $r destroy }
    unset -nocomplain r result timer ::done
} -match glob -result {progress 0 {} done 200 ::trequests::request::handler*}

test treqAsync-1.2 { Test basic async request, 404 failure } -body {
    set result [list]
    set r [::trequests::get https://httpbin.org/status/404 -async -callback [list set ::done]]
    lappend result [$r state]
    lappend result [$r status_code]
    lappend result [$r text]
    set timer [after 5000 [list set ::done timeout]]
    vwait ::done
    lappend result [$r state]
    lappend result [$r status_code]
    lappend result $::done
} -cleanup {
    catch { after cancel $timer }
    catch { $r destroy }
    unset -nocomplain r result timer ::done
} -match glob -result {progress 0 {} done 404 ::trequests::request::handler*}


test treqAsync-2.1 { Test multiple async requests } -body {

    set result [list]

    set r1 [::trequests::get https://httpbin.org/status/404 -async -callback [list set ::done]]
    set r2 [::trequests::get https://httpbin.org/status/405 -async -callback [list set ::done]]

    set timer [after 10000 [list set ::done timeout]]

    # wait for 1st request
    vwait ::done
    if { $::done eq "timeout" } {
        return -code error "timeout reached on 1st request"
    }
    lappend result [$::done status_code]

    # wait for 2nd request
    vwait ::done
    if { $::done eq "timeout" } {
        return -code error "timeout reached on 2nd request"
    }
    lappend result [$::done status_code]

    lsort $result

} -cleanup {
    catch { after cancel $timer }
    catch { $r1 destroy }
    catch { $r2 destroy }
    catch { $r3 destroy }
    unset -nocomplain r1 r2 result timer ::done
} -result {404 405}

